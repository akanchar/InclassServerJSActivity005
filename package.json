{
  "dependencies": {
    "express": "^4.21.1",
    "socket.io": "^4.8.0"
  },
  "name": "inclassserverjsactivity005",
  "version": "1.0.0",
  "description": "Check canvas, groups are the same as Activity 004. ## Forking this repo (BLAH BLAH BLAH ... the same verbiage as earlier) To work on this project, you will need to create a personal copy of the repository. This is done by forking it. Follow these steps: ### 1. Fork repository - Click the “Fork” button located in the upper right corner of the repository page. - This will create a copy of the repository under your GitHub account. (only one in the project will do this!) ### 2. Clone Your Fork - On your GitHub account, navigate to your forked repository. - Clone the forked repository to your local machine. ### 3. Adding Collaborators - Add your project members in the same way as you would for a normal repository. - Go to `Settings`, `Collaborators` to add members to this repo. ### 4. New branch - ***VERY IMPORTANT*** -> Create a new branch before you make any changes to the forked repo!! - Once the branch is created, make the changes as per project requirements. - You can make as many commits and as many pushes as needed to that branch that was newly created. - To be consistent, use the same styling for commit messages that was given in the Project I.     - [Prefix] – [Short description of the change]       The following are the only possible options for [Prefix]:     - FEAT - For new features or major additions to the project.         - Example: `FEAT - Added contact form to the Contact page`     - FIX - For bug fixes, corrections, or revisions to the code.         - Example: `FIX - Corrected navigation bar alignment on mobile devices`     - STYLE - For stylistic changes such as formatting, CSS modifications, or minor visual updates.         - Example: `STYLE - Updated color scheme for better contrast`     - DOCS - For changes or additions to the documentation, including README files and comments in the code.         - Example: `DOCS - Added project description and setup instructions to README`     - SECURITY - For changes related to improving the security of the website.         - Example: `SECURITY - Implemented input validation for contact form`     - REFACTOR - For code refactoring that doesn’t change functionality but improves code quality or organization.         - Example: `REFACTOR - Organized CSS files and cleaned up redundant styles`     - TEST - For adding tests or making changes to the testing suite.         - Example: `TEST - Added validation tests for contact form input`",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node server.js"
  },
  "author": "",
  "license": "ISC",
  "keywords": []
}
